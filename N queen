def is_safe(board, row, col, n):
    # Check if placing a queen at (row, col) is safe
    for i in range(row):
        if board[i] == col or abs(board[i] - col) == abs(i - row):
            return False
    return True

def solve_n_queens_util(board, row, n, solutions):
    if row == n:
        solutions.append(board[:])
        return
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row] = col
            solve_n_queens_util(board, row + 1, n, solutions)
            board[row] = -1

def solve_n_queens(n):
    board = [-1] * n
    solutions = []
    solve_n_queens_util(board, 0, n, solutions)
    return solutions

def print_solutions(solutions, n):
    for sol in solutions:
        for i in range(n):
            row = ['.'] * n
            row[sol[i]] = 'Q'
            print(''.join(row))
        print("\n")

# Run the solver
n = 4
solutions = solve_n_queens(n)
print(f"Total solutions for {n}-Queens: {len(solutions)}\n")
print_solutions(solutions, n)
