# Transposition Cipher Encryption
def encrypt(plain_text, key):
    cipher_text = [''] * key
    for col in range(len(plain_text)):
        row = col % key
        cipher_text[row] += plain_text[col]
    return ''.join(cipher_text)

# Transposition Cipher Decryption
def decrypt(cipher_text, key):
    num_of_columns = (len(cipher_text) + key - 1) // key
    num_of_rows = key
    num_of_shaded_boxes = (num_of_columns * num_of_rows) - len(cipher_text)

    plaintext = [''] * num_of_columns
    col = 0
    row = 0
    for symbol in cipher_text:
        plaintext[col] += symbol
        col += 1
        if (col == num_of_columns) or (col == num_of_columns - 1 and row >= num_of_rows - num_of_shaded_boxes):
            col = 0
            row += 1
    return ''.join([plaintext[col][row] for row in range(num_of_rows) for col in range(num_of_columns) if row < len(plaintext[col])])

# Test the Transposition Cipher
plain_text = "HelloWorld"
key = 4

cipher_text = encrypt(plain_text, key)
print(f"Encrypted text: {cipher_text}")

decrypted_text = decrypt(cipher_text, key)
print(f"Decrypted text: {decrypted_text}")
