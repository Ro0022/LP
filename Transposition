# Transposition Cipher Encryption
def encrypt(plain_text, key):
    # Create a list to hold the ciphertext characters
    cipher_text = [''] * key

    # Place each character in its corresponding row (according to the key)
    for col in range(len(plain_text)):
        row = col % key
        cipher_text[row] += plain_text[col]

    # Join all rows to form the encrypted text
    return ''.join(cipher_text)

# Transposition Cipher Decryption
def decrypt(cipher_text, key):
    # Calculate the number of rows and columns in the grid
    num_of_columns = len(cipher_text) // key
    num_of_rows = key
    num_of_shaded_boxes = (num_of_columns * num_of_rows) - len(cipher_text)

    # Create an empty grid
    grid = [''] * num_of_columns

    # Fill the grid with the cipher text
    col = 0
    row = 0
    for symbol in cipher_text:
        grid[col] += symbol
        col += 1
        if (col == num_of_columns) or (col == num_of_columns - 1 and row >= num_of_rows - num_of_shaded_boxes):
            col = 0
            row += 1

    # Reconstruct the original message
    plain_text = ''.join([grid[i] for i in range(num_of_columns)])
    return plain_text

# Test the Transposition Cipher
plain_text = "HelloWorld"
key = 4

# Encrypt the plain text
cipher_text = encrypt(plain_text, key)
print(f"Encrypted text: {cipher_text}")

# Decrypt the cipher text
decrypted_text = decrypt(cipher_text, key)
print(f"Decrypted text: {decrypted_text}")
